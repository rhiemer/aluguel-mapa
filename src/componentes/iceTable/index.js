import React, {PropTypes} from 'react';
import controllable from 'react-controllables';
import shouldPureComponentUpdate from 'react-pure-render/function';
import {Table,Column} from 'fixed-data-table';


class IceTable extends React.PureComponent {

  static propTypes = {
    // public
    data:PropTypes.any,
    columnDefs: PropTypes.any.isRequired,
    cellRenderer: PropTypes.func,
    getRowObjectAt: PropTypes.func,
    getRowClassNameAt: PropTypes.func,
    renderHeader: PropTypes.func,
    renderMiniHeader: PropTypes.func,
    headerHeight: PropTypes.number,
    miniHeaderHeight: PropTypes.number,
    rowHeight: PropTypes.number,
    rowsCount: PropTypes.number,
    hoveredRowIndex: PropTypes.number,
    onHoveredRowIndexChange: PropTypes.func, // generated by @controllable
    onVisibleRowsChange: PropTypes.func,
    onRowClick: PropTypes.func,
    resetToStartObj: PropTypes.any, // move table 2 start position if changed

    // private
    forceUpdateCounter: PropTypes.number.isRequired,
    onForceUpdateCounterChange: PropTypes.func, // generated by @controllable
    startRow: PropTypes.oneOfType([PropTypes.number, PropTypes.any]), // just a helper
    onStartRowChange: PropTypes.func // generated by @controllable
  }

  static defaultProps = {
    forceUpdateCounter: 0,
    startRow: 1,

    hoveredRowIndex: -1,
    hoveredMapRowIndex: -1,
    firstInvisibleRowIndex: -1,    
    resetToStartObj: {},

    columnDefs:1,
    width:1000,
    rowsCount:100,
    rowHeight:10,
    headerHeight:10,
    height:1000,
    maxHeight:2000,
    data:[]
  }

  shouldComponentUpdate = shouldPureComponentUpdate;

  constructor(props) {
    super(props);
  }


  _cellRenderer = (cellDataKey, rowData, data) => {    
      return this.props.cellRenderer(data);
  }

  _getRowObjectAt = (i) => {
    return this.props.getRowObjectAt(i);
  }

  _getRowClassNameAt = (i) => {
    return this.props.getRowClassNameAt(i, i === this.props.hoveredRowIndex);
  }

  _renderHeader = () => {
    return this.props.renderHeader(this._resetTableToStartRow);
  }

  _renderMiniHeader = () => {
    return this.props.renderMiniHeader(this._resetTableToStartRow);
  }

  _onVisibleRowsChange = (visibleRowFirst, visibleRowLast, maxVisibleRows) => {
    if (this.props.onVisibleRowsChange) {
      this.props.onVisibleRowsChange({visibleRowFirst, visibleRowLast, maxVisibleRows});
    }
  }

  _onRowMouseEnter = (index) => {
    this.props.onHoveredRowIndexChange(index);
  }

  _onRowMouseLeave = (/* index */) => {
    this.props.onHoveredRowIndexChange(-1);
  }


  _onShowFiltersClick = () => {
    this._resetTableToStartRow();
  }

  _resetTableToStartRow = () => {
    if (this.props.onStartRowChange) {
      this.props.onStartRowChange(0); // отмотать на 0 роу (потом подправить код таблички чтоб правильно мотала на любые роу - там косяк с офсетом изза хедера)
    }
  }

  _updateTableView = () => {
    if (this.props.onForceUpdateCounterChange) {
      this.props.onForceUpdateCounterChange(this.props.forceUpdateCounter + 1);
    }
  }

  _onRowClick = (index, rowData) => {
    if (this.props.onRowClick) {
      this.props.onRowClick(index, rowData);
    }
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.forceUpdateCounter === nextProps.forceUpdateCounter) {
      this._updateTableView();
    }

    // if object changed reset table to start position
    if (this.props.resetToStartObj !== nextProps.resetToStartObj) {
      this._resetTableToStartRow();
    }
  }

  componentDidUpdate(/* prevProps */) {
    if (this.props.startRow !== null) {
      if (this.props.onStartRowChange) {
        this.props.onStartRowChange(null); // we need to reset startRow after rendering complete so after we can reset to same row
      }
    }
  }  
  
  rowGetter = (index) => {        
    return this.props.data && this.props.data.length > 0?this.props.data[index]:{};
  } 

  render() {
    
    console.log(`this.props ${JSON.stringify(this.props)}`)
    return (
      <Table
            onVisibleRowsChange={this._onVisibleRowsChange}
            onRowMouseEnter={this._onRowMouseEnter}
            onRowMouseLeave={this._onRowMouseLeave}
            onRowClick={this._onRowClick}
            forceUpdateCounter={this.props.forceUpdateCounter} // прокинуто везде где надо перерисовать данные
            columns = {this.props.columnDefs}            
            getRowObjectAt = {this._getRowObjectAt}
            getRowClassNameAt={this._getRowClassNameAt}
            rowsCount = {this.props.rowsCount}
            headerHeight = {1}
            miniHeaderHeight = {this.props.miniHeaderHeight}
            startRow = {this.props.startRow} // row resetter
            rowHeight = {this.props.rowHeight}
            miniHeaderRenderer = {this._renderMiniHeader}
            headerRenderer = {this._renderHeader}
            width= {this.props.width}
            height={this.props.height}
            maxHeight={this.props.maxHeight}
            rowGetter={this.rowGetter}
            >
            <Column              
              cellRenderer = {this._cellRenderer}       
              width={this.props.width}/>
      </Table>
      
    );
  }
}

IceTable = controllable(IceTable, ['forceUpdateCounter', 'startRow', 'hoveredRowIndex']);
export default IceTable